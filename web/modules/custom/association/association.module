<?php

/**
 * @file
 * Contains association.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_help().
 */
function association_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the association module.
    case 'help.page.association':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('To manage members and persons of the association') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function association_theme()
{
  return [
    'association'      => [
      'render element' => 'children',
    ],
    'membership_step3' => [
      'render element' => 'form',
      'template'       => 'membership-step3',
    ],
  ];
}

function association_allowed_values_function(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL, &$cacheable = TRUE)
{

  \Drupal::moduleHandler()
    ->loadInclude('association', 'inc', 'association.allowed.values');

  if ($definition['entity_type'] == 'member') {
    switch ($definition['field_name']) {
      case 'country':
        return association_member_country();
        break;
      case 'status':
        return association_member_status();
        break;
      default:
        break;
    }
  }
}

function _setListOfRecipients($status = 4)
{

  $sBcc = '';
  $database = \Drupal::database();
  $query = $database->select('member', 'am');
  $query->leftJoin('person', 'ap', 'ap.id = am.contact_id');
  $query->fields('am', ['id', 'status'])->fields('ap', [
    'id',
    'lastname',
    'firstname',
    'email',
  ])->condition('status', $status, '=');
  $results = $query->execute();
  foreach ($results as $key => $result) {
    $sBcc .= $result->email . ", ";
  }
  return $sBcc;

}

function association_mail($key, &$message, $aParams)
{

  $sFrom = \Drupal::config('system.site')->get('mail');

  $message['from'] = $sFrom;
  $message['headers'] = [
    'Content-Type' => 'text/html',
    'bcc'          => $aParams[0],
    'From'         => $sFrom,
    'Sender'       => $sFrom,
    'Return-Path'  => '',
  ];
  switch ($key) {
    case 'membershipfirstemail':
      $message['subject'] = '[le Jardin de Poissy] Renouvellement d\'adhésion';
      $sBody = "<b>" . $aParams[1] . "</b>";
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
    case 'membershipreminderemail':
      $message['subject'] = '[le Jardin de Poissy] Renouvellement d\'adhésion - Relance ' . $aParams[2];
      $sBody = "<b>" . $aParams[1] . "</b>";
      $message['body'][] = check_markup(nl2br($sBody), 'full_html');
      break;
  }
}

function association_entity_insert(EntityInterface $entity)
{
  $mode = 'insert';
  $entityType = $entity->getEntityType()->id();
  switch ($entityType) {
    case "member":
      break;
    case "person":
      break;
    default:
  }
  _export_association($entityType);
}

function association_entity_update(EntityInterface $entity)
{
  $mode = 'update';
  $entityType = $entity->getEntityType()->id();
  switch ($entityType) {
    case "member":
      /*
       * This code is here to be executed either from Update in CRUD form or from MemberImportStatus
       */
      if ($entity->status->value == -1) {
        $entity->delete();
      }
      elseif ($entity->status->value == 0) {
        // List all Persons for this Member
        $id = $entity->id->value;
        $database = \Drupal::database();
        $query = $database->select('person', 'ap');
        $query->fields('ap', ['id', 'member_id'])
          ->condition('member_id', $id, '=');
        $results = $query->execute();
        // Deactivate all these Persons
        $storage = \Drupal::entityTypeManager()->getStorage('person');
        foreach ($results as $key => $result) {
          $person = $storage->load($result->id);
          $person->set("isactive", 0);
          $person->save();
        }
      }
      break;
    case "person":
      if ($entity->isactive->value == 0) {
        //Block the corresponding user
        $user_id = $entity->user_id->target_id;
        $userofperson = User::load($user_id);
        $userofperson->set("status", 0);
        $userofperson->save();
      }
      break;
    default:
  }
  _export_association($entityType);
}

function association_entity_delete(EntityInterface $entity)
{
  $mode = 'delete';
  $entityType = $entity->getEntityType()->id();
  switch ($entityType) {
    case "member":
      // List all Persons for this Member
      $id = $entity->id->value;
      $database = \Drupal::database();
      $query = $database->select('person', 'ap');
      $query->fields('ap', ['id', 'member_id'])
        ->condition('member_id', $id, '=');
      $results = $query->execute();
      // Delete all these Persons
      $storage = \Drupal::entityTypeManager()->getStorage('person');
      foreach ($results as $key => $result) {
        $person = $storage->load($result->id);
        $person->delete();
      }
      break;
    case "person":
      //Delete the corresponding user
      $user_id = $entity->user_id->target_id;
      $userofperson = User::load($user_id);
      $userofperson->delete();
      break;
    default:
  }
  _export_association($entityType);
}

function _export_association($entityType)
{

  switch ($entityType) {
    case "member":
      _export_association_CSV('association_members', 'rest_export_1');
      _export_association_CSV('association_persons', 'rest_export_3');
      break;
    case "person":
      _export_association_CSV('association_persons', 'rest_export_1');
      _export_association_CSV('association_persons', 'rest_export_2');
      break;
    default:
  }
  _export_association_CSV('association_members_and_persons', 'rest_export_1');
}

function _export_association_CSV($view, $page)
{

  $view = \Drupal\views\Views::getView($view);
  $view->setDisplay($page);
  $path = $view->getPath();

  $data = $view->preview($page)['#markup'];
  file_unmanaged_save_data($data, 'private://' . $path, FILE_EXISTS_REPLACE);

}

function association_menu_local_tasks_alter(&$data, $route_name)
{

  $oCurrentUser = \Drupal::currentUser();
  switch ($route_name) {
    case 'view.association_members_and_persons.page_1':
    case 'view.association_members.page_1':
    case 'view.association_persons.page_1':
      if ($oCurrentUser->hasPermission('administer users')) {
        $data['tabs'][0]['association.people'] = [
          '#theme'  => 'menu_local_task',
          '#link'   => [
            'title' => t('Users'),
            'url'   => Url::fromRoute('entity.user.collection'),
          ],
          '#weight' => 4,
        ];
      }
      break;
    default:
  }

}

function association_views_query_alter(ViewExecutable $view, QueryPluginBase $query)
{

  switch ($view->id()) {
    case 'association_persons':
      if ($view->current_display == 'page_2') {
        $roles = \Drupal::currentUser()->getRoles();
        if (in_array('administrator', $roles)) {
          foreach ($query->where as $condition_group_key => &$condition_group) {
            foreach ($condition_group['conditions'] as $condition_key => &$condition) {
              if ($condition['field'] == 'member_person.status') {
                unset($query->where[$condition_group_key]['conditions'][$condition_key]);
              }
            }
          }
        }
      }
      break;
    default:
  }

}

function association_views_pre_render(ViewExecutable $view)
{

  switch ($view->id()) {
    case 'association_members':
      switch ($view->current_display) {
        case 'page_1':
          $view->element['#attached']['library'][] = 'association/LoM';
          break;
        default:
      }
      break;
    case 'association_persons':
      switch ($view->current_display) {
        case 'page_1':
          $view->element['#attached']['library'][] = 'association/LoP';
          break;
        default:
      }
      break;
    default:
  }

}
